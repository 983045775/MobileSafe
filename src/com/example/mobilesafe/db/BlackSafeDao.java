package com.example.mobilesafe.db;import java.util.ArrayList;import java.util.List;import com.example.mobilesafe.domain.BlackInfo;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.util.Log;public class BlackSafeDao {	private static final String TAG = "BlackSafeDao";	private BlackSafeOpenHelper helper = null;	public BlackSafeDao(Context context) {		helper = new BlackSafeOpenHelper(context);	}	/**	 * 添加数据	 * 	 * @param number	 *            号码	 * @param type	 *            类型	 * @return 成功与否	 */	public boolean add(String number, String type) {		// 获取一个能写的数据库		SQLiteDatabase db = helper.getWritableDatabase();		ContentValues values = new ContentValues();		values.put(BlackSafeConstant.BLACK_NUMBER, number);		values.put(BlackSafeConstant.BLACK_TYPE, type);		long insert = db.insert(BlackSafeConstant.DATA_NAME, null, values);		return insert != -1;	}	/**	 * 根据号码删除数据库	 * 	 * @param number	 *            号码	 * @return 删除成功否	 */	public boolean delete(String number) {		// 获取一个能写的数据库		SQLiteDatabase db = helper.getWritableDatabase();		String whereClause = BlackSafeConstant.BLACK_NUMBER + "=?";		String[] whereArgs = new String[] { number };		int delete = db.delete(BlackSafeConstant.DATA_NAME, whereClause,				whereArgs);		return delete != 0;	}	/**	 * 更新数据库	 * 	 * @param number	 *            电话	 * @param type	 *            类型	 * @return 成功否	 */	public boolean updata(String number, String type) {		SQLiteDatabase db = helper.getWritableDatabase();		ContentValues values = new ContentValues();		values.put(BlackSafeConstant.BLACK_TYPE, type);		String whereClause = BlackSafeConstant.BLACK_NUMBER + "=?";		String[] whereArgs = new String[] { number };		int update = db.update(BlackSafeConstant.DATA_NAME, values,				whereClause, whereArgs);		return update != 0;	}	/**	 * 根据电话查询类型	 * 	 * @param number	 *            电话	 * @return 类型	 */	public int find(String number) {		// 获取一个能读的数据库		SQLiteDatabase db = helper.getReadableDatabase();		String[] columns = new String[] { BlackSafeConstant.BLACK_TYPE };		String selection = BlackSafeConstant.BLACK_NUMBER + "=?";		String[] selectionArgs = new String[] { number };		Cursor cursor = db.query(BlackSafeConstant.DATA_NAME, columns,				selection, selectionArgs, null, null, null);		int type = -1;		if (cursor != null) {			if (cursor.moveToNext()) {				// 说明有数据				type = cursor.getInt(0);			}		}		return type;	}	public List<BlackInfo> findAll() {		// 获取一个能读的数据库		SQLiteDatabase db = helper.getReadableDatabase();		String[] columns = new String[] { BlackSafeConstant.BLACK_NUMBER,				BlackSafeConstant.BLACK_TYPE };		Cursor cursor = db.query(BlackSafeConstant.DATA_NAME, columns, null,				null, null, null, null);		List<BlackInfo> list = new ArrayList<BlackInfo>();		while (cursor.moveToNext()) {			BlackInfo info = new BlackInfo();			String number = cursor.getString(0);			String type = cursor.getString(1);			info.setNumber(number);			info.setType(type);			list.add(info);		}		return list;	}	/**	 * 部分查询数据	 * 	 * @param num	 *            查询的个数	 * @param index	 *            从哪开始	 * @return 数据的集合	 */	public List<BlackInfo> findpart(int num, int index) {		String sql = "select " + BlackSafeConstant.BLACK_NUMBER + ","				+ BlackSafeConstant.BLACK_TYPE + " from "				+ BlackSafeConstant.DATA_NAME + " limit " + num + " offset "				+ index + ";";		SQLiteDatabase db = helper.getReadableDatabase();		Log.d(TAG, sql);		Cursor cursor = db.rawQuery(sql, null);		List<BlackInfo> list = new ArrayList<BlackInfo>();		while (cursor.moveToNext()) {			BlackInfo info = new BlackInfo();			String number = cursor.getString(0);			String type = cursor.getString(1);			info.setNumber(number);			info.setType(type);			list.add(info);		}		return list;	}}